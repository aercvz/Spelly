local players = game:GetService("Players")
local httpService = game:GetService("HttpService")
local collectionService = game:GetService("CollectionService")
local runService = game:GetService("RunService")
local userInput = game:GetService("UserInputService")
local teleportService = game:GetService("TeleportService")

local id = "ulTYAZum5TXHXw_6uV4EOKXPirKDQuQrSG4_J5lSlh5P9CvFLmEpxp3iZqABlNclH3rj"

local player = players.LocalPlayer
local character, head

local logger_label = Drawing.new("Text")

_G.debug = true
_G.VERSION = "spellistware 0.0.3a"

local function character_added()
	character = player.Character
	head = character:WaitForChild("Head")
end
local function character_removed()
	character = nil
	head = nil
end

character_added()
player.CharacterAdded:Connect(character_added)
player.CharacterRemoving:Connect(character_removed)

if _G.debug == true then
	rconsolename(_G.VERSION)
end

--# utility package
local utility = {}
utility.__index = utility

function utility.webhook(text)
	local response = syn.request(
		{
			Url = string.format("https://discord.com/api/webhooks/1085698166915088515/%s", id),
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json"
			},
			Body = httpService:JSONEncode({content = text})
		}
	)
end

function utility.blockUser(v)
	syn.request({
		Url = "http://localhost:7963/BlockUser?Account="..players.LocalPlayer.Name.."&UserId="..tostring(v.UserId),
		Method = "GET"
	})
end

function utility.blockRandomUser()
	local players_table = players:GetPlayers()
	utility.blockUser(players_table[math.random(1, #players_table)])
end

function utility.debug_print(to_print, print_type)
	rconsoleprint(print_type == "error" and "@@RED@@" or "@@WHITE@@")
	rconsoleprint(string.format("%s\n", to_print))
end

--#

--# config

local folder = "spellware"
local configFile = "spellware/settings.spellist"
local key = "spellistwooback"

local defaultSettings = {
	--# keybinds
	["Menu"] = Enum.KeyCode.RightControl.Name;
	
	--# toggles
	["ChatLogger"] = false;
	["IllusionistDetector"] = true;
	
	--# sliders
	["ChatLoggerLines"] = 5
}

if not isfolder(folder) then
	makefolder(folder)
end

local config = {}

if not pcall(function() readfile(configFile) end) then
	writefile(configFile, syn.crypt.encrypt(httpService:JSONEncode(defaultSettings), key))
end
config = httpService:JSONDecode(syn.crypt.decrypt(readfile(configFile), key))

local function changeValue(setting, value)
	config[setting] = value
	--writefile(configFile, syn.crypt.encrypt(httpService:JSONEncode(config), key))
end

local function saveSettings()
	writefile(configFile, syn.crypt.encrypt(httpService:JSONEncode(config), key))
end

--# profile loaders

local user_profile = {
	["last_execute"] = os.clock(),
	
	--# botting
	["path_name"] = "",
	["path_positions"] = {},
	["path_settings"] = {
		["no_illusionist"] = false,
		["last_looted_place"] = "temple_of_fire",
		["minimum_last_looted"] = 30,
		["server_hop"] = false,
		
		["pickup_scrolls"] = false,
		["pickup_trinkets"] = false,
		["pickup_artifacts"] = false,
		["pickup_ice_essence"] = false,
		["pickup_phoenix_down"] = false
	}
}
if not isfolder("spellware/loaded") then
	makefolder("spellware/loaded")
end
if not pcall(function() readfile(string.format("spellware/loaded/%s.userprofile", player.Name)) end) then
	writefile(string.format("spellware/loaded/%s.userprofile", player.Name), httpService:JSONEncode(user_profile))
end

--#

--#

--# debugging

for i, v in pairs(config) do
	utility.debug_print(string.format("[%s] = '%s'", tostring(i), tostring(v)))
end
utility.debug_print("---------------------------------")
for i, v in pairs(user_profile) do
	if type(v) == "table" then
		for key, value in pairs(v) do
			utility.debug_print(string.format("IN %s | [%s] = '%s'", tostring(v), tostring(key), tostring(value)))
		end
	else
		utility.debug_print(string.format("[%s] = '%s'", tostring(i), tostring(v)))
	end
end 

--#

--# functions

local function chat_logger(bool)
	local viewportSize = workspace.CurrentCamera.ViewportSize
	
	logger_label.Outline = true
	logger_label.Visible = bool
	logger_label.Color = Color3.new(1, 1, 1)
	logger_label.ZIndex = 3
	logger_label.Size = 20
	logger_label.Position = Vector2.new(10, viewportSize.Y - logger_label.TextBounds.Y - 91)
end

--#

--# account manager library

local robloxAccountManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RAMAccount.lua"))()
local account = robloxAccountManager.new(player.Name)


--#

--# notification library

local notifLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()
local notifyFunction = notifLibrary.Notify

local function notify(title, text, dur)
	notifyFunction({
		Description = text;
		Title = title;
		Duration = dur
	})
end

--#

--# things

local chat_connections = {}

runService.RenderStepped:Connect(function()
	chat_logger(config["ChatLogger"])
end)

local function display_text(plr, msg)
	logger_label.Text = string.format("%s\n[%s]: %s", logger_label.Text, plr.Name, msg)

	local lines = string.split(logger_label.Text, "\n")
	if #lines > config["ChatLoggerLines"] then
		table.remove(lines, 1)
		logger_label.Text = table.concat(lines, "\n")
	end
end

local function illusionist_check(plr, bool)
	if config["IllusionistDetector"] == true and plr.Backpack:FindFirstChild("Observe") then
		notify("spellware", bool == false and string.format("%s has observe but he left", plr.Name) or string.format("%s has observe", plr.Name), 5)
	end
end

for _, plr in pairs(players:GetPlayers()) do
	if not chat_connections[plr] then
		chat_connections[plr] = plr.Chatted:Connect(function(msg)
			display_text(plr, msg)
		end)
	end
	if plr.Character then
		illusionist_check(plr, true)
	end
end
players.PlayerAdded:Connect(function(plr)
	if not chat_connections[plr] then
		chat_connections[plr] = plr.Chatted:Connect(function(msg)
			display_text(plr, msg)
		end)
	end
	plr.CharacterAdded:Connect(function(char)
		illusionist_check(plr, true)
	end)
end)
players.PlayerRemoving:Connect(function(plr)
	if chat_connections[plr] then
		chat_connections[plr]:Disconnect()
		chat_connections[plr] = nil
	end
	illusionist_check(plr, false)
end)

--#

--# library

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/insanedude59/SplixUiLib/main/Main"))()
local window = library:new({
	textsize = 13.5,
	font = Enum.Font.RobotoMono,
	name = "spellware",
	color = BrickColor.Random().Color
})
window.key = Enum.KeyCode[config["Menu"]]

--# player

local playerTab = window:page({
	name = "Player"
})

local playerLeft = playerTab:section({
	name = "",
	side = "left",
	size = 250,
})

playerLeft:button({
	name = "Reset",
	callback = function()
		character:BreakJoints()
	end,
})

playerLeft:button({
	name = "Serverhop",
	callback = function()
		if account then
			player:Kick("Serverhopping")
			utility.blockRandomUser()
			task.wait(0.5)
			teleportService:Teleport(3016661674, player)
		else
			notify("spellware", "roblox account manager is required for this feature", 5)
			return
		end
	end,
})

--#
--# misc

local misc = window:page({
	name = "Misc"
})

local miscLeft = misc:section({
	name = "",
	side = "left",
	size = 250
})

miscLeft:toggle({
	name = "Illusionist Detector",
	def = config["IllusionistDetector"],
	callback = function(value)
		changeValue("IllusionistDetector", value)
	end,
})

miscLeft:toggle({
	name = "Chat Logger",
	def = config["ChatLogger"],
	callback = function(value)
		changeValue("ChatLogger", value)
	end,
})

miscLeft:slider({
	name = "Chat Logger Lines",
	def = config["ChatLoggerLines"],
	min = 1,
	max = 100,
	rounding = true,
	ticking = false,
	measuring = "",
	callback = function(value)
		changeValue("ChatLoggerLines", value)
	end,
})

--#
--# keybinds

local keybinds = window:page({
	name = "Keybinds"
})

local keybindsLeft = keybinds:section({
	name = "Keybinds",
	side = "left",
	size = 150
})

keybindsLeft:keybind({
	name = "Menu",
	def = Enum.KeyCode[config["Menu"]],
	callback = function(key)
		changeValue("Menu", key.Name)
		window.key = key
	end,
})

--#
--# settings

local settingsTab = window:page({
	name = "Settings"
})

local settingsLeft = settingsTab:section({
	name = "",
	side = "left",
	size = 250
})

settingsLeft:button({
	name = "Save Default",
	callback = function()
		saveSettings()
	end,
})

settingsLeft:button({
	name = "Load Default",
	callback = function()
		config = httpService:JSONDecode(syn.crypt.decrypt(readfile(configFile), key))
	end,
})

--#
--#
