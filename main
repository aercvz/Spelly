local players = game:GetService("Players")
local httpService = game:GetService("HttpService")
local collectionService = game:GetService("CollectionService")
local runService = game:GetService("RunService")
local userInput = game:GetService("UserInputService")

local player = players.LocalPlayer
local character, head, torso, hilt

local monsterSpawns = workspace:WaitForChild("MonsterSpawns")
local triggers = monsterSpawns:WaitForChild("Triggers")
local last_looted_hidden = false

local function character_added()
	character = player.Character
	head = character:WaitForChild("Head")
	torso = character:WaitForChild("Torso")
	hilt = character:WaitForChild("Hilt")
end
local function character_removed()
	character = nil
	head = nil
	torso = nil
	hilt = nil
end

character_added()
player.CharacterAdded:Connect(character_added)
player.CharacterRemoving:Connect(character_removed)

--# config

local config = "settings.spelly"

local default = {
	["menuKeybind"] = Enum.KeyCode.RightControl.Name,
	["lastLootedNotifierKeybind"] = Enum.KeyCode.L.Name,
	["antiAAGun"] = false,
	["lastLootedNotifier"] = false
}

local settings

if not pcall(function() readfile(config) end) then
	writefile(config, httpService:JSONEncode(default))
end

settings = httpService:JSONDecode(readfile(config))

local function saveSettings()
	writefile(config, httpService:JSONEncode(settings))
end

local function changeValue(setting, value)
	settings[setting] = value
	writefile(config, httpService:JSONEncode(settings))
end

--#

--# notifications

local notifLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()
local notifyFunction = notifLibrary.Notify

local function notify(title, text, dur)
	notifyFunction({
		Description = text;
		Title = title;
		Duration = dur
	})
end

--#

--# functions

local function secondsToClock(seconds)
	seconds = tonumber(seconds)

	if seconds <= 0 then
		return "00:00:00"
	else
		local hour = string.format("%02.f", math.floor(seconds/3600))
		local minute = string.format("%02.f", math.floor(seconds/60 - (hour * 60)))
		local second = string.format("%02.f", math.floor(seconds - hour * 3600 - minute * 60))
		return string.format("%sh %sm %ss", hour, minute, second)
	end
end

--#

--# modules

local function apply_antiGun(weapon)
	local propWeld = weapon:WaitForChild("PropWeld")
	local og_c1 = propWeld.C1
	local og_c0 = propWeld.C0
	propWeld.Part0 = torso
	propWeld.C1 = CFrame.new(1, 3, 0)
	local listener; listener = runService.RenderStepped:Connect(function()
		if weapon == nil or weapon.Parent == nil then
			propWeld.C1 = og_c1
			propWeld.C0 = og_c0
			listener:Disconnect()
			listener = nil
		end
		if settings["antiAAGun"] == false then
			propWeld.C1 = og_c1
			propWeld.C0 = og_c0
			listener:Disconnect()
			listener = nil
		end
		propWeld.C0 *= CFrame.Angles(0, 2, 0)
	end)
end

hilt.ChildAdded:Connect(function(v)
	if settings["antiAAGun"] == true then
		apply_antiGun(v)
	end
end)

local last_looted = {
	castle_rock = triggers.CastleRockSnake.LastSpawned,
	deep_forest = triggers.evileye1.LastSpawned,
	last_bastion = triggers.evileye2.LastSpawned,
	temple_of_fire = triggers.MazeSnakes.LastSpawned
}

local last_looted_label = Drawing.new("Text")

userInput.InputBegan:Connect(function(key, gpe)
	if key.KeyCode == Enum.KeyCode[settings["lastLootedNotifierKeybind"]] and not gpe then
		last_looted_hidden = not last_looted_hidden
		last_looted_label.Transparency = (last_looted_hidden and 1) or 0
	end
end)

runService.RenderStepped:Connect(function()
	local delta = {
		castle_rock = os.time() - last_looted.castle_rock.Value,
		deep_forest = os.time() - last_looted.deep_forest.Value,
		last_bastion = os.time() - last_looted.last_bastion.Value,
		temple_of_fire = os.time() - last_looted.temple_of_fire.Value
	}
	local viewportSize = workspace.CurrentCamera.ViewportSize
	last_looted_label.Text = string.format("castle_rock: %s ago\ndeep_forest: %s ago\nlast_bastion: %s ago\ntemple_of_fire: %s ago", secondsToClock(delta.castle_rock), secondsToClock(delta.deep_forest), secondsToClock(delta.last_bastion), secondsToClock(delta.temple_of_fire))
	last_looted_label.Outline = true
	last_looted_label.Visible = true
	last_looted_label.Color = Color3.new(1, 1, 1)
	last_looted_label.ZIndex = 3
	last_looted_label.Size = 20
	last_looted_label.Position = Vector2.new(10, viewportSize.Y - last_looted_label.TextBounds.Y - 91)
end)

--#

--# library

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/insanedude59/SplixUiLib/main/Main"))()
local window = library:new({
	textsize = 13.5,
	font = Enum.Font.RobotoMono,
	name = "Spelly HUB",
	color = BrickColor.Random().Color,
	key = Enum.KeyCode[default["menuKeybind"]]
})

local tab = window:page({
	name = "Main"
})
local misc = tab:section({
	name = "Misc",
	side = "left",
	size = 150
})
misc:toggle({
	name = "Anti AA-Gun",
	def = default["antiAAGun"],
	callback = function(value)
		changeValue("antiAAGun", value)
		if value == true then
			local weapon = hilt:FindFirstChildWhichIsA("MeshPart")
			if not weapon then
				notify("spelly", "an equipped weapon is required for this module", 2.5)
			else
				apply_antiGun(weapon)
			end
		end
	end,
})
misc:button({
	name = "Headless",
	callback = function()
		if not collectionService:HasTag(character, "Knocked") then
			notify("spelly", "headless requires you to be ragdolled in order to use it", 2.5)
		else
			head:Destroy()
		end
	end,
})

local gui = tab:section({
	name = "GUI",
	side = "right",
	size = 150
})
misc:toggle({
	name = "Last Looted Notifier",
	def = default["lastLootedNotifier"],
	callback = function(value)
		changeValue("lastLootedNotifier", value)
	end,
})

local keybinds = tab:section({
	name = "GUI",
	side = "left",
	size = 150
})
keybinds:keybind({
	name = "Menu Keybind",
	def = default["menuKeybind"],
	callback = function(key)
		print(key)
		changeValue("menuKeybind", key.Name)
		window.key = key
	end,
})
misc:keybind({
	name = "Last Looted Notifier Keybind",
	def = default["lastLootedNotifierKeybind"],
	callback = function(key)
		changeValue("lastLootedNotifierKeybind", key.Name)
	end,
})

--#
